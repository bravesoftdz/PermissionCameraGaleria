unit Unit1;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, System.Actions,
  FMX.ActnList, FMX.StdActns, FMX.MediaLibrary.Actions, FMX.Objects,
  FMX.Controls.Presentation, FMX.StdCtrls,

  System.Permissions,

  Androidapi.jni.Os,
  Androidapi.jni.Support,
  Androidapi.jni.GraphicsContentViewText,
  Androidapi.Helpers;

type
  TForm1 = class(TForm)
    ActionList1: TActionList;
    Image1: TImage;
    TakePhotoFromLibraryAction1: TTakePhotoFromLibraryAction;
    Button1: TButton;
    TakePhotoFromCameraAction1: TTakePhotoFromCameraAction;
    Button2: TButton;
    procedure TakePhotoFromLibraryAction1DidFinishTaking(Image: TBitmap);
  private
    procedure DisplayRationale(Sender: TObject;
      const APermissions: TArray<string>; const APostRationaleProc: TProc);
    procedure PermissionCamera;
    procedure TakeCameraPermissionRequestResult(Sender: TObject;
      const APermissions: TArray<string>;
      const AGrantResults: TArray<TPermissionStatus>);
    { Private declarations }
  public
    var
      FPermissionCamera,
      FPermissionReadExternalStorage,
      FPermissionWriteExternalStorage: string;
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.fmx}

procedure TForm1.TakePhotoFromLibraryAction1DidFinishTaking(Image: TBitmap);
begin
  Image1.Bitmap:= Image;
end;

procedure TForm1.PermissionCamera;
begin
{$IF Defined(ANDROID)}
  // if gSDK >= 23 then
  begin
    FPermissionCamera :=
      JStringToString(TJManifest_permission.JavaClass.CAMERA);
    FPermissionReadExternalStorage :=
      JStringToString(TJManifest_permission.JavaClass.READ_EXTERNAL_STORAGE);
    FPermissionWriteExternalStorage :=
      JStringToString(TJManifest_permission.JavaClass.WRITE_EXTERNAL_STORAGE);
  end;

  if ((TJContextCompat.JavaClass.checkSelfPermission(TAndroidHelper.Activity,
    TJManifest_permission.JavaClass.READ_EXTERNAL_STORAGE) <>
    TJPackageManager.JavaClass.PERMISSION_GRANTED) or
    (TJContextCompat.JavaClass.checkSelfPermission(TAndroidHelper.Activity,
    TJManifest_permission.JavaClass.WRITE_EXTERNAL_STORAGE) <>
    TJPackageManager.JavaClass.PERMISSION_GRANTED) or
    (TJContextCompat.JavaClass.checkSelfPermission(TAndroidHelper.Activity,
    TJManifest_permission.JavaClass.CAMERA) <>
    TJPackageManager.JavaClass.PERMISSION_GRANTED)) then
  begin
    PermissionsService.RequestPermissions
      ([FPermissionReadExternalStorage,
      FPermissionWriteExternalStorage,
      FPermissionCamera],
      TakeCameraPermissionRequestResult,
      DisplayRationale);
  end
  else
    TakePhotoFromCameraAction1.Execute;
{$ENDIF}
end;

procedure TForm1.TakeCameraPermissionRequestResult(Sender: TObject;
const APermissions: TArray<string>;
const AGrantResults: TArray<TPermissionStatus>);
begin
  if (Length(AGrantResults) = 3) and
    (AGrantResults[0] = TPermissionStatus.Granted) and
    (AGrantResults[1] = TPermissionStatus.Granted) and
    (AGrantResults[2] = TPermissionStatus.Granted) then
    TakePhotoFromCameraAction1.Execute
  else
    TDialogService.ShowMessage
      ('Cannot take a photo because the required permissions are not all granted');
end;

procedure TForm1.DisplayRationale(Sender: TObject;
const APermissions: TArray<string>; const APostRationaleProc: TProc);
var
  I: integer;
  RationaleMsg: string;
begin
  for I := 0 to High(APermissions) do
  begin
    if APermissions[I] = FPermissionCamera then
      RationaleMsg := RationaleMsg +
        'The app needs to access the camera to take a photo' + SLineBreak +
        SLineBreak
    else if APermissions[I] = FPermissionReadExternalStorage then
      RationaleMsg := RationaleMsg +
        'The app needs to read a photo file from your device';
  end;

  // Show an explanation to the user *asynchronously* - don't block this thread waiting for the user's response!
  // After the user sees the explanation, invoke the post-rationale routine to request the permissions
  TDialogService.ShowMessage(RationaleMsg,
    procedure(const AResult: TModalResult)
    begin
      APostRationaleProc;
    end);
end;
end.
